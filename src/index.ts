import * as http from "http";
import * as grpc from "@grpc/grpc-js";
import {
  isInvalidVerb,
  isPreflight,
  setCorsHeader,
  setDefaultHeaders,
} from "./util";
import {
  GrcpServerCallImpl,
  GrpcWebWrapper,
  GrpcWebWrapperOptions,
} from "./types";
import { isString } from "lodash";
import { _grpcWebHandler } from "./handler";

/**
 * Handles vaild grpc-web request with grpc.Server and
 * a generic node http.IncomingMessage.
 */
export const grpcWebHandler = (
  grpcServer: grpc.Server,
  req: http.IncomingMessage & { body?: unknown },
  res: http.ServerResponse<http.IncomingMessage> & GrcpServerCallImpl
) => {
  const _body = req.body;

  // body is generated by some frameworks (e.g. Next)
  if (_body && isString(_body)) {
    _grpcWebHandler(grpcServer, req, res, _body);
    return;
  }

  let body = "";

  req.on("data", (chunk) => {
    body += chunk;
  });

  req.on("end", () => {
    _grpcWebHandler(grpcServer, req, res, body);
  });
};

/**
 * standalone grpc web server
 */
const GrpcWebServer: GrpcWebWrapper = (
  grpcServer: grpc.Server,
  options?: GrpcWebWrapperOptions
) => {
  if (!options) {
    console.log("grpc web starting- no cors set");
  }

  const nodeServer = http.createServer();

  nodeServer.on(
    "request",
    (req: http.IncomingMessage, res: GrcpServerCallImpl) => {
      setDefaultHeaders(res);

      if (options?.cors) {
        setCorsHeader(res, options.cors);
      }

      if (isPreflight(req, res)) return;
      if (isInvalidVerb(req, res)) return;

      grpcWebHandler(grpcServer, req, res);
    }
  );

  return nodeServer;
};

export default GrpcWebServer;
